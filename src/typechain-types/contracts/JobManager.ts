/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace JobManager {
  export type ValidationStruct = {
    validationAddress: AddressLike;
    validationFunction: BytesLike;
  };

  export type ValidationStructOutput = [
    validationAddress: string,
    validationFunction: string
  ] & { validationAddress: string; validationFunction: string };
}

export declare namespace IJobManager {
  export type ValidationSetupStruct = {
    validationAddress: AddressLike;
    validationFunction: BytesLike;
    initializerFunction: BytesLike;
    initializerData: BytesLike;
  };

  export type ValidationSetupStructOutput = [
    validationAddress: string,
    validationFunction: string,
    initializerFunction: string,
    initializerData: string
  ] & {
    validationAddress: string;
    validationFunction: string;
    initializerFunction: string;
    initializerData: string;
  };

  export type ImageStruct = {
    PCR0: BytesLike;
    PCR1: BytesLike;
    PCR2: BytesLike;
  };

  export type ImageStructOutput = [PCR0: string, PCR1: string, PCR2: string] & {
    PCR0: string;
    PCR1: string;
    PCR2: string;
  };
}

export declare namespace AttestationAuther {
  export type EnclaveImageStruct = {
    PCR0: BytesLike;
    PCR1: BytesLike;
    PCR2: BytesLike;
  };

  export type EnclaveImageStructOutput = [
    PCR0: string,
    PCR1: string,
    PCR2: string
  ] & { PCR0: string; PCR1: string; PCR2: string };
}

export interface JobManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ATTESTATION_MAX_AGE"
      | "ATTESTATION_VERIFIER"
      | "DEFAULT_ADMIN_ROLE"
      | "admin"
      | "createJob"
      | "executeJob"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getVerifiedKey"
      | "getWhitelistedImage"
      | "grantRole"
      | "hasRole"
      | "isEnclaveKeyValid"
      | "jobCount"
      | "jobs"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "token"
      | "updateToken"
      | "verifyKey"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EnclaveImageRevoked"
      | "EnclaveImageWhitelisted"
      | "EnclaveKeyRevoked"
      | "EnclaveKeyVerified"
      | "EnclaveKeyWhitelisted"
      | "JobCreated"
      | "JobExecuted"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenUpdated"
      | "VerifierUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ATTESTATION_MAX_AGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTESTATION_VERIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [
      IJobManager.ValidationSetupStruct[],
      string,
      IJobManager.ImageStruct,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeJob",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedImage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEnclaveKeyValid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "jobCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyKey",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ATTESTATION_MAX_AGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTESTATION_VERIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEnclaveKeyValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyKey", data: BytesLike): Result;
}

export namespace EnclaveImageRevokedEvent {
  export type InputTuple = [imageId: BytesLike];
  export type OutputTuple = [imageId: string];
  export interface OutputObject {
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveImageWhitelistedEvent {
  export type InputTuple = [
    imageId: BytesLike,
    PCR0: BytesLike,
    PCR1: BytesLike,
    PCR2: BytesLike
  ];
  export type OutputTuple = [
    imageId: string,
    PCR0: string,
    PCR1: string,
    PCR2: string
  ];
  export interface OutputObject {
    imageId: string;
    PCR0: string;
    PCR1: string;
    PCR2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveKeyRevokedEvent {
  export type InputTuple = [enclavePubKey: BytesLike];
  export type OutputTuple = [enclavePubKey: string];
  export interface OutputObject {
    enclavePubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveKeyVerifiedEvent {
  export type InputTuple = [enclavePubKey: BytesLike, imageId: BytesLike];
  export type OutputTuple = [enclavePubKey: string, imageId: string];
  export interface OutputObject {
    enclavePubKey: string;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveKeyWhitelistedEvent {
  export type InputTuple = [enclavePubKey: BytesLike, imageId: BytesLike];
  export type OutputTuple = [enclavePubKey: string, imageId: string];
  export interface OutputObject {
    enclavePubKey: string;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    enclaveUrl: string,
    input: BytesLike,
    creator: AddressLike,
    validations: JobManager.ValidationStruct[],
    paymentPerExecution: BigNumberish,
    maxBaseFee: BigNumberish,
    maxPriorityFee: BigNumberish,
    gasRefundAmount: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    enclaveUrl: string,
    input: string,
    creator: string,
    validations: JobManager.ValidationStructOutput[],
    paymentPerExecution: bigint,
    maxBaseFee: bigint,
    maxPriorityFee: bigint,
    gasRefundAmount: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    enclaveUrl: string;
    input: string;
    creator: string;
    validations: JobManager.ValidationStructOutput[];
    paymentPerExecution: bigint;
    maxBaseFee: bigint;
    maxPriorityFee: bigint;
    gasRefundAmount: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobExecutedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    executor: AddressLike,
    payment: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    jobId: bigint,
    executor: string,
    payment: bigint,
    data: string
  ];
  export interface OutputObject {
    jobId: bigint;
    executor: string;
    payment: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUpdatedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierUpdatedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JobManager extends BaseContract {
  connect(runner?: ContractRunner | null): JobManager;
  waitForDeployment(): Promise<this>;

  interface: JobManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ATTESTATION_MAX_AGE: TypedContractMethod<[], [bigint], "view">;

  ATTESTATION_VERIFIER: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  createJob: TypedContractMethod<
    [
      _validations: IJobManager.ValidationSetupStruct[],
      _enclave_url: string,
      _pcrs: IJobManager.ImageStruct,
      _input: BytesLike,
      _paymentPerExecution: BigNumberish,
      _maxBaseFee: BigNumberish,
      _maxPriorityFee: BigNumberish,
      _gasRefundAmount: BigNumberish,
      _amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  executeJob: TypedContractMethod<
    [jobId: BigNumberish, data: BytesLike, attestation: BytesLike],
    [void],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getVerifiedKey: TypedContractMethod<[_key: AddressLike], [string], "view">;

  getWhitelistedImage: TypedContractMethod<
    [_imageId: BytesLike],
    [AttestationAuther.EnclaveImageStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isEnclaveKeyValid: TypedContractMethod<
    [key: AddressLike],
    [void],
    "nonpayable"
  >;

  jobCount: TypedContractMethod<[], [bigint], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        IJobManager.ImageStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creator: string;
        image: IJobManager.ImageStructOutput;
        enclave_url: string;
        input: string;
        paymentPerExecution: bigint;
        lastExecutionTime: bigint;
        maxBaseFee: bigint;
        maxPriorityFee: bigint;
        gasRefundAmount: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  updateToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  verifyKey: TypedContractMethod<
    [
      signature: BytesLike,
      enclavePubKey: BytesLike,
      imageId: BytesLike,
      enclaveCPUs: BigNumberish,
      enclaveMemory: BigNumberish,
      timestampInMilliseconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ATTESTATION_MAX_AGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ATTESTATION_VERIFIER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createJob"
  ): TypedContractMethod<
    [
      _validations: IJobManager.ValidationSetupStruct[],
      _enclave_url: string,
      _pcrs: IJobManager.ImageStruct,
      _input: BytesLike,
      _paymentPerExecution: BigNumberish,
      _maxBaseFee: BigNumberish,
      _maxPriorityFee: BigNumberish,
      _gasRefundAmount: BigNumberish,
      _amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeJob"
  ): TypedContractMethod<
    [jobId: BigNumberish, data: BytesLike, attestation: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerifiedKey"
  ): TypedContractMethod<[_key: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedImage"
  ): TypedContractMethod<
    [_imageId: BytesLike],
    [AttestationAuther.EnclaveImageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEnclaveKeyValid"
  ): TypedContractMethod<[key: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "jobCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        IJobManager.ImageStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creator: string;
        image: IJobManager.ImageStructOutput;
        enclave_url: string;
        input: string;
        paymentPerExecution: bigint;
        lastExecutionTime: bigint;
        maxBaseFee: bigint;
        maxPriorityFee: bigint;
        gasRefundAmount: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyKey"
  ): TypedContractMethod<
    [
      signature: BytesLike,
      enclavePubKey: BytesLike,
      imageId: BytesLike,
      enclaveCPUs: BigNumberish,
      enclaveMemory: BigNumberish,
      timestampInMilliseconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EnclaveImageRevoked"
  ): TypedContractEvent<
    EnclaveImageRevokedEvent.InputTuple,
    EnclaveImageRevokedEvent.OutputTuple,
    EnclaveImageRevokedEvent.OutputObject
  >;
  getEvent(
    key: "EnclaveImageWhitelisted"
  ): TypedContractEvent<
    EnclaveImageWhitelistedEvent.InputTuple,
    EnclaveImageWhitelistedEvent.OutputTuple,
    EnclaveImageWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "EnclaveKeyRevoked"
  ): TypedContractEvent<
    EnclaveKeyRevokedEvent.InputTuple,
    EnclaveKeyRevokedEvent.OutputTuple,
    EnclaveKeyRevokedEvent.OutputObject
  >;
  getEvent(
    key: "EnclaveKeyVerified"
  ): TypedContractEvent<
    EnclaveKeyVerifiedEvent.InputTuple,
    EnclaveKeyVerifiedEvent.OutputTuple,
    EnclaveKeyVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "EnclaveKeyWhitelisted"
  ): TypedContractEvent<
    EnclaveKeyWhitelistedEvent.InputTuple,
    EnclaveKeyWhitelistedEvent.OutputTuple,
    EnclaveKeyWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "JobCreated"
  ): TypedContractEvent<
    JobCreatedEvent.InputTuple,
    JobCreatedEvent.OutputTuple,
    JobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "JobExecuted"
  ): TypedContractEvent<
    JobExecutedEvent.InputTuple,
    JobExecutedEvent.OutputTuple,
    JobExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUpdated"
  ): TypedContractEvent<
    TokenUpdatedEvent.InputTuple,
    TokenUpdatedEvent.OutputTuple,
    TokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierUpdated"
  ): TypedContractEvent<
    VerifierUpdatedEvent.InputTuple,
    VerifierUpdatedEvent.OutputTuple,
    VerifierUpdatedEvent.OutputObject
  >;

  filters: {
    "EnclaveImageRevoked(bytes32)": TypedContractEvent<
      EnclaveImageRevokedEvent.InputTuple,
      EnclaveImageRevokedEvent.OutputTuple,
      EnclaveImageRevokedEvent.OutputObject
    >;
    EnclaveImageRevoked: TypedContractEvent<
      EnclaveImageRevokedEvent.InputTuple,
      EnclaveImageRevokedEvent.OutputTuple,
      EnclaveImageRevokedEvent.OutputObject
    >;

    "EnclaveImageWhitelisted(bytes32,bytes,bytes,bytes)": TypedContractEvent<
      EnclaveImageWhitelistedEvent.InputTuple,
      EnclaveImageWhitelistedEvent.OutputTuple,
      EnclaveImageWhitelistedEvent.OutputObject
    >;
    EnclaveImageWhitelisted: TypedContractEvent<
      EnclaveImageWhitelistedEvent.InputTuple,
      EnclaveImageWhitelistedEvent.OutputTuple,
      EnclaveImageWhitelistedEvent.OutputObject
    >;

    "EnclaveKeyRevoked(bytes)": TypedContractEvent<
      EnclaveKeyRevokedEvent.InputTuple,
      EnclaveKeyRevokedEvent.OutputTuple,
      EnclaveKeyRevokedEvent.OutputObject
    >;
    EnclaveKeyRevoked: TypedContractEvent<
      EnclaveKeyRevokedEvent.InputTuple,
      EnclaveKeyRevokedEvent.OutputTuple,
      EnclaveKeyRevokedEvent.OutputObject
    >;

    "EnclaveKeyVerified(bytes,bytes32)": TypedContractEvent<
      EnclaveKeyVerifiedEvent.InputTuple,
      EnclaveKeyVerifiedEvent.OutputTuple,
      EnclaveKeyVerifiedEvent.OutputObject
    >;
    EnclaveKeyVerified: TypedContractEvent<
      EnclaveKeyVerifiedEvent.InputTuple,
      EnclaveKeyVerifiedEvent.OutputTuple,
      EnclaveKeyVerifiedEvent.OutputObject
    >;

    "EnclaveKeyWhitelisted(bytes,bytes32)": TypedContractEvent<
      EnclaveKeyWhitelistedEvent.InputTuple,
      EnclaveKeyWhitelistedEvent.OutputTuple,
      EnclaveKeyWhitelistedEvent.OutputObject
    >;
    EnclaveKeyWhitelisted: TypedContractEvent<
      EnclaveKeyWhitelistedEvent.InputTuple,
      EnclaveKeyWhitelistedEvent.OutputTuple,
      EnclaveKeyWhitelistedEvent.OutputObject
    >;

    "JobCreated(uint256,string,bytes,address,tuple[],uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;
    JobCreated: TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;

    "JobExecuted(uint256,address,uint256,bytes)": TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;
    JobExecuted: TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenUpdated(address)": TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;
    TokenUpdated: TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;

    "VerifierUpdated(address)": TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;
    VerifierUpdated: TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;
  };
}
