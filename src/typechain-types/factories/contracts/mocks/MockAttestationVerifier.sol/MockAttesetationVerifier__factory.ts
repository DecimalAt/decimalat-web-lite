/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockAttesetationVerifier,
  MockAttesetationVerifierInterface,
} from "../../../../contracts/mocks/MockAttestationVerifier.sol/MockAttesetationVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifierEnclaveKey",
        type: "address",
      },
    ],
    name: "setVerifierEnclaveKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifierEnclaveKey",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_attestationSig",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "_enclaveKey",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_imageId",
        type: "bytes32",
      },
    ],
    name: "verifyAttestationSig",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061042e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306cb6bb7146100465780631fa57a281461006257806320a59aa014610080575b600080fd5b610060600480360381019061005b91906101b6565b6100b0565b005b61006a6100f3565b60405161007791906101f2565b60405180910390f35b61009a60048036038101906100959190610389565b610117565b6040516100a791906101f2565b60405180910390f35b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061018382610158565b9050919050565b61019381610178565b811461019e57600080fd5b50565b6000813590506101b08161018a565b92915050565b6000602082840312156101cc576101cb61014e565b5b60006101da848285016101a1565b91505092915050565b6101ec81610178565b82525050565b600060208201905061020760008301846101e3565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61026082610217565b810181811067ffffffffffffffff8211171561027f5761027e610228565b5b80604052505050565b6000610292610144565b905061029e8282610257565b919050565b600067ffffffffffffffff8211156102be576102bd610228565b5b6102c782610217565b9050602081019050919050565b82818337600083830152505050565b60006102f66102f1846102a3565b610288565b90508281526020810184848401111561031257610311610212565b5b61031d8482856102d4565b509392505050565b600082601f83011261033a5761033961020d565b5b813561034a8482602086016102e3565b91505092915050565b6000819050919050565b61036681610353565b811461037157600080fd5b50565b6000813590506103838161035d565b92915050565b6000806000606084860312156103a2576103a161014e565b5b600084013567ffffffffffffffff8111156103c0576103bf610153565b5b6103cc86828701610325565b93505060206103dd868287016101a1565b92505060406103ee86828701610374565b915050925092509256fea264697066735822122041774f684f631d4c3cbea9854f30f1364de93fd790a3d1707957c9982cf9b50664736f6c63430008180033";

type MockAttesetationVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAttesetationVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAttesetationVerifier__factory extends ContractFactory {
  constructor(...args: MockAttesetationVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAttesetationVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockAttesetationVerifier__factory {
    return super.connect(runner) as MockAttesetationVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAttesetationVerifierInterface {
    return new Interface(_abi) as MockAttesetationVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAttesetationVerifier {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockAttesetationVerifier;
  }
}
